// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Replication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicationClient is the client API for Replication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicationClient interface {
	ReceiveBid(ctx context.Context, in *BidMessage, opts ...grpc.CallOption) (*AckMessage, error)
	ReturnResult(ctx context.Context, in *ReqMessage, opts ...grpc.CallOption) (*OutcomeMessage, error)
}

type replicationClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationClient(cc grpc.ClientConnInterface) ReplicationClient {
	return &replicationClient{cc}
}

func (c *replicationClient) ReceiveBid(ctx context.Context, in *BidMessage, opts ...grpc.CallOption) (*AckMessage, error) {
	out := new(AckMessage)
	err := c.cc.Invoke(ctx, "/Replication.Replication/ReceiveBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) ReturnResult(ctx context.Context, in *ReqMessage, opts ...grpc.CallOption) (*OutcomeMessage, error) {
	out := new(OutcomeMessage)
	err := c.cc.Invoke(ctx, "/Replication.Replication/ReturnResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServer is the server API for Replication service.
// All implementations must embed UnimplementedReplicationServer
// for forward compatibility
type ReplicationServer interface {
	ReceiveBid(context.Context, *BidMessage) (*AckMessage, error)
	ReturnResult(context.Context, *ReqMessage) (*OutcomeMessage, error)
	mustEmbedUnimplementedReplicationServer()
}

// UnimplementedReplicationServer must be embedded to have forward compatible implementations.
type UnimplementedReplicationServer struct {
}

func (UnimplementedReplicationServer) ReceiveBid(context.Context, *BidMessage) (*AckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveBid not implemented")
}
func (UnimplementedReplicationServer) ReturnResult(context.Context, *ReqMessage) (*OutcomeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnResult not implemented")
}
func (UnimplementedReplicationServer) mustEmbedUnimplementedReplicationServer() {}

// UnsafeReplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicationServer will
// result in compilation errors.
type UnsafeReplicationServer interface {
	mustEmbedUnimplementedReplicationServer()
}

func RegisterReplicationServer(s grpc.ServiceRegistrar, srv ReplicationServer) {
	s.RegisterService(&Replication_ServiceDesc, srv)
}

func _Replication_ReceiveBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).ReceiveBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replication.Replication/ReceiveBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).ReceiveBid(ctx, req.(*BidMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_ReturnResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).ReturnResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replication.Replication/ReturnResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).ReturnResult(ctx, req.(*ReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Replication_ServiceDesc is the grpc.ServiceDesc for Replication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Replication.Replication",
	HandlerType: (*ReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveBid",
			Handler:    _Replication_ReceiveBid_Handler,
		},
		{
			MethodName: "ReturnResult",
			Handler:    _Replication_ReturnResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
